#{{ ansible_managed }}
input {

  file {
    type => "log4j"
    path => "{{ application_home }}/log/KGRWebServer.log"
  }

  file {
    type => "log4j"
    path => "{{ application_home }}/log/RTM.log"
  }

  file {
    type => "log4j"
    path => "{{ application_home }}/log/kgrAdapterLogger.log"
  }

  file {
    type => "log4j"
    path => "{{ application_home }}/log/RiskInsight.log"
  }

  file {
    type => "log4j"
    path => "{{ application_home }}/log/startRTM.stdout.log"
  }

  file {
    type => "log4j-lcms"
    path => "{{ application_home }}/dist/log/LCMS_Debug.log"
  }

  file {
    type => "log4cxx-special1"
    path => "{{ application_home }}/log/KGRAdapter_stdout.log"
  }

#KNS_PID:*.log
#KTS_PID:*.log
#KRMS.log
#KIS.log
#KGRAdapterServer.log
#RKDBI.log
#KGRReportBatch.log
#KGRStartBatch.log
#RMDSExtractionTools.log

  file {
    type => "log4cxx-special2"
    path => "{{ application_home }}/log/KGRTaskServer_master_1_DBTraceFile.log  "
  }

  file {
    type => "log4cxx"
    path => "{{ application_home }}/log/KGRImportServer_stdout.log"
  }

  file {
    type => "log4cxx"
    path => "{{ application_home }}/log/KGRRateManagerServer_stdout.log"
  }

  file {
    type => "log4cxx"
    path => "{{ application_home }}/log/KGRServer_master_stdout.log"
  }

  file {
    type => "log4cxx"
    path => "{{ application_home }}/log/KGRTaskServer_1_stdout.log"
  }

#  file {
#    type => "log4j"
#    path => "{{ application_home }}/dist/log/*.log"
#  }

#  file {
#    path => "{{ application_home }}/dist/3rdparty/J2EE/tomcat_dist/logs/*.log"
#    exclude => ["*.gz"]
#  }
#
#  file {
#    path => "{{ application_home }}/data/J2EE/TomcatConfigs/logs/*.log"
#    exclude => ["*.gz"]
#  }

}

filter {

   #if [type] == "app-log" {
   #  grok {
   #     patterns_dir => "./patterns"
   #     match => ["message","%{LOG_DATE:log_date} \[%{NOTSPACE:thread}\] %{LOGLEVEL:log_level} %{NOTSPACE:classname} %{GREEDYDATA:log_msg}"]
   #  }
   #  if [classname] =~ /SellRequest$/ {
   #     mutate { add_tag => "sell" }
   #  } else if [classname] =~ /SearchRequest$/ {
   #     mutate { add_tag => "search" }
   #  }
   #}

  if [type] == "log4j" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}%{SPACE}%{LOGLEVEL:level}%{SPACE}"
      negate => true
      what => "previous"
    }
    mutate { replace => { type => "{{ application_name }}" } }
#    add_field => [ "level", "%{@level}" ]

    ## Filters below here should be consistent for all log formats.
    ## Remove DEBUG logs to reduce the amount of data that needs to be processed.
    #if [loglevel] == "DEBUG" {
    #  drop {}
    #}

  }

  if [type] == "log4cxx-special1" {
    multiline {
      pattern => "^%{YEAR}%{SPACE}%{MONTH}%{SPACE}%{MONTHDAY}%{SPACE}%{TIME}%{SPACE}GMT%{SPACE}\+0"
      negate => true
      what => "previous"
    }
    mutate { replace => { type => "{{ application_name }}" } }
  }

  if [type] == "log4cxx" {
    multiline {
      pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY}%{SPACE}%{TIME},%{NUMBER:num1}-%{BASE16NUM}-%{LOGLEVEL:level}%{SPACE}-"
      negate => true
      what => "previous"
    }
    mutate { replace => { type => "{{ application_name }}" } }
  }

  #if "_grokparsefailure" in [tags] {
  #    drop { }
  #}
}
#filter {
#  grok {
##    type => "log4j"
#    add_tag => [ "ApplicationName" ]
#    add_tag => [ "level_%{level}" ]
#    match => [ "message", "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{LOGLEVEL:level}%{SPACE}%{SYSLOG5424SD}%{SPACE}%{DATA:service}%{SPACE}%{JAVACLASS}%{GREEDYDATA:message}" ]
##    match => [ "message", "%{TIMESTAMP_ISO8601:logdate}%{SPACE}\[%{LOGLEVEL:level}%{SPACE}]%{SPACE}\[%{DATA:user}]%{SPACE}\[%{DATA:thread}]%{SPACE}\[%{DATA:classname}]%{SPACE}%{GREEDYDATA:message}" ]
#  }
#
##  date {
##     logdate => "yyyy-MM-dd HH:mm:ss,SSS"
##  }
#
#  mutate { replace => { type => "{{ application_name }}" } }
#}
{% if logstash_monitor_redis_enabled %}
output {
  redis {
    host => "{{ redis_bind_interface }}"
    data_type => "list"
    key => "logstash"
    codec => json
  }
  stdout { codec => rubydebug }
}
{% endif %}
